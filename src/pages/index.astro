---
import Layout from "../layouts/Layout.astro";
import Scene from "../components/Scene.astro";
---

<Layout title="Bryon Sigawin">
  <main class="mx-auto p-8 flex justify-end flex-col h-screen font-light">
    <div class="flex align-top gap-3">
      <div class="rounded bg-teal-600 w-1 h-1 flex-none mt-3.5"></div>
      <div class="text-3xl mb-6">
        <span>hi, my name is</span>
        <span class="animated bg-slate-200 px-0.5 font-medium"
          >Bryon Sigawin</span
        >.
        <span>i design and build</span>
        <span class="animated bg-slate-200 px-0.5 font-medium"
          >interactive websites</span
        >
        <span>and</span>
        <span class="animated bg-slate-200 px-0.5 font-medium"
          >web applications</span
        >.
      </div>
    </div>
    <div class="flex align-top gap-3">
      <div class="rounded bg-teal-600 w-1 h-1 flex-none mt-3"></div>
      <div>
        <div class="text-xl">
          hit me up on <a
            href="mailto:bryon.sigawin@gmail.com"
            class="underline">bryon.sigawin@gmail.com</a
          >.
        </div>
        <div class="text-xl">
          or find out what i've done on my <a
            href="/bryon-sigawin-cv-2023.pdf"
            target="_blank"
            class="underline">resume</a
          >.
        </div>
      </div>
    </div>
  </main>

  <Scene />
</Layout>

<script>
  import anime from "animejs";

  const texts = document.querySelectorAll(".animated");

  texts.forEach((text, textIndex) => {
    const textInCharCodes = text.innerHTML
      .split("")
      .map((v) => v.charCodeAt(0));
    text.innerHTML = "";

    const textAnimated = [];

    const timeline = anime.timeline({
      change: () => {
        text.innerHTML = textAnimated
          .map((code) => String.fromCharCode(code))
          .join("");
      },
    });

    textInCharCodes.forEach((v, i) => {
      const progress = { value: 0 };

      timeline.add(
        {
          targets: progress,
          value: [v === 32 ? 32 : getRandomIntInclusive(97, 122), v],
          duration: 1600,
          delay: 1000 + 600 * textIndex + 1,
          round: 1,
          easing: "easeOutCirc",

          change: () => {
            textAnimated[i] = progress.value;
          },
        },
        0 + i * 60
      );
    });
  });

  function getRandomIntInclusive(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1) + min); // The maximum is inclusive and the minimum is inclusive
  }
</script>

<style></style>
